image: mcr.microsoft.com/dotnet/sdk:6.0

stages:
  - build
  - test
  - deploy

build-job:       # This job runs in the build stage, which runs first.
  stage: build
  before_script:
    - 'echo | dotnet --version'
  script:
    - echo "Building the application"
    - dotnet build MediaHub/MediaHub.sln
    - echo "Preparing Project"
    - dotnet publish MediaHub/MediaHub.sln -c release
  artifacts:
    paths:
      - "MediaHub/MediaHub/bin/*"
    expire_in: 1 week

unit-test-job:   
  stage: test 
  script:
    - echo "Starting to run all Unit tests"
    - dotnet test --filter Category=Unit

docker-build:  
  stage: build
  image: docker:latest 
  services:
    - docker:dind 
  before_script:
    - docker info
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd ./MediaHub
    - docker build --pull -f ./MediaHub/Dockerfile -t registry.gitlab.ost.ch:45023/seproj/2022-fs/g04-mediahub/code/mediahub .
    - docker push registry.gitlab.ost.ch:45023/seproj/2022-fs/g04-mediahub/code/mediahub
    - docker logout
  only:
    - main

deploy-application:
  stage: deploy
  image: alpine
  when: manual
  before_script:
    - apk add openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
  script:
    - ssh -o StrictHostKeyChecking=no root@152.96.80.57 "/tmp/code/server-deployment.sh; exit;"


sonarqube-check:
  stage: deploy
  image: mcr.microsoft.com/dotnet/sdk:6.0 #mcr.microsoft.com/dotnet/core/sdk:latest
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script: 
      - "apt-get update"
      - "apt-get install --yes openjdk-11-jre"
      - "dotnet tool install --global dotnet-sonarscanner"
      - "export PATH=\"$PATH:$HOME/.dotnet/tools\""
      - "dotnet sonarscanner begin /k:\"SEProj_2022-FS_g04-mediahub_code_AX-rfTla5SjtzxusfRYp\" /d:\"sonar.login=$SONAR_TOKEN\" /d:\"sonar.host.url=$SONAR_HOST_URL\""
      - "dotnet build MediaHub/MediaHub.sln"
      - "dotnet sonarscanner end /d:sonar.login=\"$SONAR_TOKEN\""
  allow_failure: true
  only:
    - main # or the name of your main branch
