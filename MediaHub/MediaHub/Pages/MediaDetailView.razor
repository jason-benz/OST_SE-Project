@page "/movieDetailView/{Id:int}"

@using MediaHub.Data.MediaModule.Model
@using MediaHub.Data.MediaModule.ViewModel
@using MediaHub.Services
@using MediaHub.View

@inject IMediaSearchViewModel _mediaSearchViewModel 
@inject IIdentityService _identityService
@inject IRatingViewModel _ratingViewModel
@inject IMediaCommentViewModel _mediaCommentViewModel

<PageTitle>Media Details</PageTitle>

@if (_movie != null)
{
<div class="detail-view-container">
    <div class="title-and-add-button">
        <h1>@_movie.Title</h1>
        @if (_ratingViewModel.IsAddedToProfile)
        {
            <button class="btn btn-primary" @onclick="_ratingViewModel.ToggleIsAddedToProfile"><span class="oi oi-minus" aria-hidden="true"></span> Remove from favorites</button>
        } else
        {
            <button class="btn btn-primary" @onclick="_ratingViewModel.ToggleIsAddedToProfile"><span class="oi oi-plus" aria-hidden="true"></span> Add to favorites</button>
        }
    </div>
    <img alt="Poster" width="100px" src="@_movie.PosterUrl">
    <table class="media-data-table">
        <tbody>
            <tr>
                <td class="caption">Year:</td>
                <td>@_movie.ReleaseDate</td>
            </tr>
            <tr>
                <td class="caption">Duration:</td>
                <td>@_movie.Runtime min</td>
            </tr>
            <tr>
                <td class="caption">Genre:</td>
                <td>@string.Join(", ", @_movie.Genres)</td>
            </tr>
            <tr>
                <td class="caption">TMDb Rating:</td>
                <td>@_movie.Rating / 10</td>
            </tr>
            <tr>
                <td colspan="2">@_movie.Overview</td>
            </tr>
        </tbody>
    </table>
    <div class="rating">
        <h2>My Rating</h2>
        <Rating Callback="(byte value) => _ratingViewModel.Rating = value" CurrentValue="_ratingViewModel.Rating"/>
    </div>
    <div class="comments-heading-and-button">
        <h2>Comments</h2>
        <button class="btn btn-primary" @onclick="ToggleShowAddComment">Write comment</button>
    </div>
    <div class="media-detail-comments-list">
        @if (_showAddComment)
        {
            <form class="comment-form" @onsubmit="AddComment">
                <textarea id="addCommentText" class="form-control" placeholder="Write a Comment" @bind="_addCommentText" @bind:event="oninput"/>
                <button type="submit" class="btn btn-secondary">Submit</button>
            </form>
        }
         @if (_showEditComment)
        {
            <form class="comment-form" @onsubmit="UpdateComment" @onreset="CancelEditComment">
                <textarea id="editCommentText" class="form-control" maxlength="500" @bind="_editCommentText"/>
                <button type="submit" class="btn btn-primary">Save Changes</button>
                <button type="reset" class="btn btn-secondary">Cancle</button>
                <button type="button" @onclick="DeleteComment" class="btn btn-danger">Delete</button>
            </form>
        }
        <div class="comments-box">
                @if (!_mediaComments.Any())
                {
                    <p class="alternative-text">@AlternativeText</p>
                } else {
                <table class="table">
                <tbody>
                @foreach (var comment in _mediaComments.OrderByDescending(c => c.Created).ToList())
                {
                    <tr>
                        <td><SingleComment Id="@comment.Id" UserId="@comment.UserId" Text="@comment.CommentText" CreationDate="@comment.Created"/></td>
                        @if(comment.UserId == _userId)
                        {
                            <td><button class="btn btn-secondary oi oi-pencil" @onclick="_ => ShowEditCommentView(comment)"/></td>
                        } else {
                            <td></td>
                        }
                    </tr>
                }
                </tbody>
            </table>
            }
        </div>
    </div>
</div>
}

@code {
    [Parameter]
    public int Id { get; set; }

    [Parameter]
    public string AlternativeText { get; set; } = "No comments here - write the first one!";

    private string _userId;

    private Movie? _movie;

    private List<MediaComment>? _mediaComments;

    private string _addCommentText;
    private string _editCommentText;
    private int _editCommentId;

    private bool _showAddComment = false;
    private bool _showEditComment = false;

    private void AddComment()
    {
        if (!string.IsNullOrWhiteSpace(_addCommentText))
        {
           _mediaCommentViewModel.AddComment(_movie.Id, _userId, _addCommentText);
           LoadComments();
        }
        ToggleShowAddComment();
    }

    private void UpdateComment()
    {
        if (!string.IsNullOrWhiteSpace(_editCommentText))
        {
            _mediaCommentViewModel.UpdateComment(_editCommentId, _userId, _editCommentText);
            LoadComments();
        }
        CancelEditComment();
    }

    private void CancelEditComment()
    {
        _showEditComment = false;
        _editCommentText = string.Empty;
        _editCommentId = 0;
    }

    private void DeleteComment()
    {
        _mediaCommentViewModel.DeleteComment(_editCommentId, _userId);
        LoadComments();
        CancelEditComment();
    }

    private void ToggleShowAddComment()
    {
        if (_showEditComment) { CancelEditComment(); }
        _showAddComment = !_showAddComment;
        _addCommentText = string.Empty;
    }

    private void ShowEditCommentView(MediaComment comment)
    {
        if (_showAddComment) { ToggleShowAddComment(); }
        _editCommentText = comment.CommentText;
        _editCommentId = comment.Id;
        _showEditComment = true;
    }

    private void LoadComments()
    {
        _mediaComments = _mediaCommentViewModel.GetComments(Id);
    }

    protected override async Task OnInitializedAsync()
    {
        _movie = await _mediaSearchViewModel.GetMovieAsync(Id);
        _userId = _identityService!.UserId!;
        _ratingViewModel.Load(_userId, _movie); //force not null --> handled by microsoft auth framework
        LoadComments();
    }
}
