@page "/chat"

@using MediaHub.Data.MessagingModule.Model
@using MediaHub.Data.MessagingModule.ViewModel
@using MediaHub.Services
@using Microsoft.AspNetCore.Routing.Matching
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.CodeAnalysis.Scripting
@using SendGrid.Helpers.Mail.Model
@using System.Net.Sockets

@inject IIdentityService _identityServiceInstance
@inject IChatViewModel _chatViewModel
@inject NavigationManager NavigationManager
@inject IJSRuntime _jsRuntime

@if (_identityServiceInstance.UserId == null)
{
    <p>There is a problem with your profile. Please contact support.</p>
}
else if (!_chatViewModel.ContactList.Any())
{
    <p>No contacts were found. Please add some contacts to chat with.</p>
}
else
{
    <div id="chat-container">
        <div id="contactlist-container">
            <h2>Contact List:</h2>
            <ul id="contactlist">
                @foreach (var contact in _chatViewModel.ContactList)
                {
                    <li>
                        @if (contact.UserId == _chatViewModel.Contact?.UserId)
                        {
                            <button class="contactlist-element focus" @onclick="@(() => _chatViewModel.OpenChat(@contact.UserId))">@contact.Username</button>
                        }
                        else
                        {
                            <button class="contactlist-element" @onclick="@(() => _chatViewModel.OpenChat(@contact.UserId))">@contact.Username</button>
                        }
                    </li>
                }
            </ul>
        </div>

        @if (_chatViewModel.Contact != null)
        {
            <div id="chat-input-and-messages-container">
                <div id="chat-messages-container">
                    @foreach (var message in _chatViewModel.Messages)
                    {
                        <div class="msg-line">
                            @if (_identityServiceInstance.UserId.Equals(message.Sender.UserId))
                            {
                                <div class="single-msg sent-msg"> @message.Content </div>
                            }
                            else
                            {
                                <div class="single-msg received-msg"> @message.Content </div>
                            }
                        </div>
                    }
                </div>
                <div id="chat-input-container">
                    <form @onsubmit=_chatViewModel.SendMessage>
                        <input id="msg-input" type="text" placeholder="Type your message here" @bind="_chatViewModel.CurrentMessage" required/>
                        <button id="send-msg-btn" type="submit" class="btn btn-primary">Send Message</button>
                    </form>
                </div>
            </div>
        }
        else
        {
            <p>Please select a contact to chat with.</p>
        }
    </div>
}

@code
{
    protected override void OnInitialized()
    {
        _chatViewModel.RefreshRequested += RefreshPage;
        string userId = _identityServiceInstance.UserId;
        _chatViewModel.SetUserById(userId);
        _chatViewModel.LoadAllContactUserProfiles(userId);
        StartPollingMessages();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            await _jsRuntime.InvokeVoidAsync("ScrollToBottom");
        }
    }

    async Task StartPollingMessages()
    {
        while (true)
        {
            await Task.Delay(2000);
            _chatViewModel.LoadAllMessagesForActiveChat();
        }
    }

    private void RefreshPage()
    {
        StateHasChanged();
    }
}

