@page "/editUserProfile"

@using MediaHub.Services
@using MediaHub.Data.ViewModel
@using Microsoft.CodeAnalysis.CSharp.Syntax
@using MediaHub.Data.Persistency

@inject IUserProfileViewModel _userProfileViewModel
@inject IdentityService _identityServiceInstance
@inject ILogService _logger

<h3>Edit your profile</h3>

@if (_identityServiceInstance.UserId == null || _userProfile == null)
{
    <p>There is a problem with your profile. Please contact support.</p>
}
else
{
    <form>
        <div class="form-control-file">
            <img src="@_userProfile.ProfilePicture" alt="No profile picture set..." />
            <br /><br />
            <InputFile accept=".png,.jpg,.jpeg,.gif" OnChange="@UploadProfilePicture"/>
        </div>
        <div class="form-group">
            <label for="username">Username</label>
            <input id="username" class="form-control" @bind-value="NewUsername" maxlength="50" required />
            @if (_showUsernameHint)
            {
                <label>Username is already taken! Please choose another one.</label>
            }
        </div>
        <div class="form-group">
            <label for="bio">Biography (max. 255 characters)</label>
            <textarea id="bio" class="form-control" maxlength="255" @bind="_userProfile.Biography" @bind:event="oninput">@_userProfile.Biography</textarea>
        </div>
        <br />
        <button type="button" @onclick="SaveChanges" class="btn btn-primary">Save changes</button>
        @if (_showSaveChangesHint)
        {
            <label>Changes were saved successfully</label>
        }
    </form>
}

@code {
    private Data.Model.UserProfile _userProfile;
    private bool _showSaveChangesHint;
    private bool _showUsernameHint;
    
    private string _newUsername = string.Empty;
    private string NewUsername
    {
        get => string.IsNullOrWhiteSpace(_newUsername) ? _userProfile.Username : _newUsername;
        set => _newUsername = value;
    }

    protected override void OnInitialized()
    {
        string userId = _identityServiceInstance.UserId;
        _userProfile = _userProfileViewModel.GetUserProfileById(userId);
    }

    private void SaveChanges()
    {
        if (IsUsernameAvailable())
        {
            _userProfile.Username = NewUsername;
            _userProfileViewModel.UpdateUserProfile(_userProfile);
            _showSaveChangesHint = true;
        }
        else
        {
            _showUsernameHint = true;
        }
    }

    private bool IsUsernameAvailable()
    {
        return _userProfile.Username == _newUsername || _userProfileViewModel.IsUsernameAvailable(_newUsername);
    }

    private async Task UploadProfilePicture(InputFileChangeEventArgs e)
    {
        string contentType = e.File.ContentType;
        IBrowserFile resizedImage = await e.File.RequestImageFileAsync(contentType, 300, 300);
        byte[] buffer = new byte[resizedImage.Size];
        await resizedImage.OpenReadStream().ReadAsync(buffer);
        string imageData = $"data:{contentType};base64,{Convert.ToBase64String(buffer)}";
        _userProfile.ProfilePicture = imageData;
    }
}
